/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { BillArray } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { ObjectGroupArray } from '../model';
// @ts-ignore
import { ObjectGroupSingle } from '../model';
// @ts-ignore
import { ObjectGroupUpdate } from '../model';
// @ts-ignore
import { PiggyBankArray } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * ObjectGroupsApi - axios parameter creator
 * @export
 */
export const ObjectGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a object group.
         * @summary Delete a object group.
         * @param {string} id The ID of the object group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObjectGroup: async (id: string, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteObjectGroup', 'id', id)
            const localVarPath = `/v1/object-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object group.
         * @summary Get a single object group.
         * @param {string} id The ID of the object group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectGroup: async (id: string, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getObjectGroup', 'id', id)
            const localVarPath = `/v1/object-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all bills with this object group.
         * @summary List all bills with this object group.
         * @param {string} id The ID of the account.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillByObjectGroup: async (id: string, xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listBillByObjectGroup', 'id', id)
            const localVarPath = `/v1/object-groups/{id}/bills`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all oject groups.
         * @summary List all oject groups.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjectGroups: async (xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/object-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of all the piggy banks connected to the object group. 
         * @summary List all piggy banks related to the object group.
         * @param {string} id The ID of the account.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPiggyBankByObjectGroup: async (id: string, xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listPiggyBankByObjectGroup', 'id', id)
            const localVarPath = `/v1/object-groups/{id}/piggy-banks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing object group.
         * @summary Update existing object group.
         * @param {string} id The ID of the object group
         * @param {ObjectGroupUpdate} objectGroupUpdate JSON array with updated piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateObjectGroup: async (id: string, objectGroupUpdate: ObjectGroupUpdate, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateObjectGroup', 'id', id)
            // verify required parameter 'objectGroupUpdate' is not null or undefined
            assertParamExists('updateObjectGroup', 'objectGroupUpdate', objectGroupUpdate)
            const localVarPath = `/v1/object-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(objectGroupUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectGroupsApi - functional programming interface
 * @export
 */
export const ObjectGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a object group.
         * @summary Delete a object group.
         * @param {string} id The ID of the object group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteObjectGroup(id: string, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteObjectGroup(id, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single object group.
         * @summary Get a single object group.
         * @param {string} id The ID of the object group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObjectGroup(id: string, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectGroupSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getObjectGroup(id, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all bills with this object group.
         * @summary List all bills with this object group.
         * @param {string} id The ID of the account.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBillByObjectGroup(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBillByObjectGroup(id, xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all oject groups.
         * @summary List all oject groups.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listObjectGroups(xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectGroupArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listObjectGroups(xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of all the piggy banks connected to the object group. 
         * @summary List all piggy banks related to the object group.
         * @param {string} id The ID of the account.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPiggyBankByObjectGroup(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiggyBankArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPiggyBankByObjectGroup(id, xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update existing object group.
         * @summary Update existing object group.
         * @param {string} id The ID of the object group
         * @param {ObjectGroupUpdate} objectGroupUpdate JSON array with updated piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateObjectGroup(id: string, objectGroupUpdate: ObjectGroupUpdate, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectGroupSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateObjectGroup(id, objectGroupUpdate, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectGroupsApi - factory interface
 * @export
 */
export const ObjectGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectGroupsApiFp(configuration)
    return {
        /**
         * Delete a object group.
         * @summary Delete a object group.
         * @param {string} id The ID of the object group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObjectGroup(id: string, xTraceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteObjectGroup(id, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object group.
         * @summary Get a single object group.
         * @param {string} id The ID of the object group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectGroup(id: string, xTraceId?: string, options?: any): AxiosPromise<ObjectGroupSingle> {
            return localVarFp.getObjectGroup(id, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all bills with this object group.
         * @summary List all bills with this object group.
         * @param {string} id The ID of the account.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBillByObjectGroup(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<BillArray> {
            return localVarFp.listBillByObjectGroup(id, xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * List all oject groups.
         * @summary List all oject groups.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listObjectGroups(xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<ObjectGroupArray> {
            return localVarFp.listObjectGroups(xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of all the piggy banks connected to the object group. 
         * @summary List all piggy banks related to the object group.
         * @param {string} id The ID of the account.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPiggyBankByObjectGroup(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<PiggyBankArray> {
            return localVarFp.listPiggyBankByObjectGroup(id, xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing object group.
         * @summary Update existing object group.
         * @param {string} id The ID of the object group
         * @param {ObjectGroupUpdate} objectGroupUpdate JSON array with updated piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateObjectGroup(id: string, objectGroupUpdate: ObjectGroupUpdate, xTraceId?: string, options?: any): AxiosPromise<ObjectGroupSingle> {
            return localVarFp.updateObjectGroup(id, objectGroupUpdate, xTraceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteObjectGroup operation in ObjectGroupsApi.
 * @export
 * @interface ObjectGroupsApiDeleteObjectGroupRequest
 */
export interface ObjectGroupsApiDeleteObjectGroupRequest {
    /**
     * The ID of the object group.
     * @type {string}
     * @memberof ObjectGroupsApiDeleteObjectGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof ObjectGroupsApiDeleteObjectGroup
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for getObjectGroup operation in ObjectGroupsApi.
 * @export
 * @interface ObjectGroupsApiGetObjectGroupRequest
 */
export interface ObjectGroupsApiGetObjectGroupRequest {
    /**
     * The ID of the object group.
     * @type {string}
     * @memberof ObjectGroupsApiGetObjectGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof ObjectGroupsApiGetObjectGroup
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for listBillByObjectGroup operation in ObjectGroupsApi.
 * @export
 * @interface ObjectGroupsApiListBillByObjectGroupRequest
 */
export interface ObjectGroupsApiListBillByObjectGroupRequest {
    /**
     * The ID of the account.
     * @type {string}
     * @memberof ObjectGroupsApiListBillByObjectGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof ObjectGroupsApiListBillByObjectGroup
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof ObjectGroupsApiListBillByObjectGroup
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof ObjectGroupsApiListBillByObjectGroup
     */
    readonly page?: number
}

/**
 * Request parameters for listObjectGroups operation in ObjectGroupsApi.
 * @export
 * @interface ObjectGroupsApiListObjectGroupsRequest
 */
export interface ObjectGroupsApiListObjectGroupsRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof ObjectGroupsApiListObjectGroups
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof ObjectGroupsApiListObjectGroups
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof ObjectGroupsApiListObjectGroups
     */
    readonly page?: number
}

/**
 * Request parameters for listPiggyBankByObjectGroup operation in ObjectGroupsApi.
 * @export
 * @interface ObjectGroupsApiListPiggyBankByObjectGroupRequest
 */
export interface ObjectGroupsApiListPiggyBankByObjectGroupRequest {
    /**
     * The ID of the account.
     * @type {string}
     * @memberof ObjectGroupsApiListPiggyBankByObjectGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof ObjectGroupsApiListPiggyBankByObjectGroup
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof ObjectGroupsApiListPiggyBankByObjectGroup
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof ObjectGroupsApiListPiggyBankByObjectGroup
     */
    readonly page?: number
}

/**
 * Request parameters for updateObjectGroup operation in ObjectGroupsApi.
 * @export
 * @interface ObjectGroupsApiUpdateObjectGroupRequest
 */
export interface ObjectGroupsApiUpdateObjectGroupRequest {
    /**
     * The ID of the object group
     * @type {string}
     * @memberof ObjectGroupsApiUpdateObjectGroup
     */
    readonly id: string

    /**
     * JSON array with updated piggy bank information. See the model for the exact specifications.
     * @type {ObjectGroupUpdate}
     * @memberof ObjectGroupsApiUpdateObjectGroup
     */
    readonly objectGroupUpdate: ObjectGroupUpdate

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof ObjectGroupsApiUpdateObjectGroup
     */
    readonly xTraceId?: string
}

/**
 * ObjectGroupsApi - object-oriented interface
 * @export
 * @class ObjectGroupsApi
 * @extends {BaseAPI}
 */
export class ObjectGroupsApi extends BaseAPI {
    /**
     * Delete a object group.
     * @summary Delete a object group.
     * @param {ObjectGroupsApiDeleteObjectGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectGroupsApi
     */
    public deleteObjectGroup(requestParameters: ObjectGroupsApiDeleteObjectGroupRequest, options?: any) {
        return ObjectGroupsApiFp(this.configuration).deleteObjectGroup(requestParameters.id, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object group.
     * @summary Get a single object group.
     * @param {ObjectGroupsApiGetObjectGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectGroupsApi
     */
    public getObjectGroup(requestParameters: ObjectGroupsApiGetObjectGroupRequest, options?: any) {
        return ObjectGroupsApiFp(this.configuration).getObjectGroup(requestParameters.id, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all bills with this object group.
     * @summary List all bills with this object group.
     * @param {ObjectGroupsApiListBillByObjectGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectGroupsApi
     */
    public listBillByObjectGroup(requestParameters: ObjectGroupsApiListBillByObjectGroupRequest, options?: any) {
        return ObjectGroupsApiFp(this.configuration).listBillByObjectGroup(requestParameters.id, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all oject groups.
     * @summary List all oject groups.
     * @param {ObjectGroupsApiListObjectGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectGroupsApi
     */
    public listObjectGroups(requestParameters: ObjectGroupsApiListObjectGroupsRequest = {}, options?: any) {
        return ObjectGroupsApiFp(this.configuration).listObjectGroups(requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of all the piggy banks connected to the object group. 
     * @summary List all piggy banks related to the object group.
     * @param {ObjectGroupsApiListPiggyBankByObjectGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectGroupsApi
     */
    public listPiggyBankByObjectGroup(requestParameters: ObjectGroupsApiListPiggyBankByObjectGroupRequest, options?: any) {
        return ObjectGroupsApiFp(this.configuration).listPiggyBankByObjectGroup(requestParameters.id, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing object group.
     * @summary Update existing object group.
     * @param {ObjectGroupsApiUpdateObjectGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectGroupsApi
     */
    public updateObjectGroup(requestParameters: ObjectGroupsApiUpdateObjectGroupRequest, options?: any) {
        return ObjectGroupsApiFp(this.configuration).updateObjectGroup(requestParameters.id, requestParameters.objectGroupUpdate, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }
}
