/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { BasicSummary } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
/**
 * SummaryApi - axios parameter creator
 * @export
 */
export const SummaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is used in Firefly III to populate the dashboard. 
         * @summary Returns basic sums of the users data.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [currencyCode] A currency code like EUR or USD, to filter the result. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicSummary: async (start: string, end: string, xTraceId?: string, currencyCode?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getBasicSummary', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getBasicSummary', 'end', end)
            const localVarPath = `/v1/summary/basic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currency_code'] = currencyCode;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SummaryApi - functional programming interface
 * @export
 */
export const SummaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SummaryApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is used in Firefly III to populate the dashboard. 
         * @summary Returns basic sums of the users data.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [currencyCode] A currency code like EUR or USD, to filter the result. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicSummary(start: string, end: string, xTraceId?: string, currencyCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicSummary(start, end, xTraceId, currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SummaryApi - factory interface
 * @export
 */
export const SummaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SummaryApiFp(configuration)
    return {
        /**
         * Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is used in Firefly III to populate the dashboard. 
         * @summary Returns basic sums of the users data.
         * @param {string} start A date formatted YYYY-MM-DD. 
         * @param {string} end A date formatted YYYY-MM-DD. 
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [currencyCode] A currency code like EUR or USD, to filter the result. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicSummary(start: string, end: string, xTraceId?: string, currencyCode?: string, options?: any): AxiosPromise<BasicSummary> {
            return localVarFp.getBasicSummary(start, end, xTraceId, currencyCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBasicSummary operation in SummaryApi.
 * @export
 * @interface SummaryApiGetBasicSummaryRequest
 */
export interface SummaryApiGetBasicSummaryRequest {
    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof SummaryApiGetBasicSummary
     */
    readonly start: string

    /**
     * A date formatted YYYY-MM-DD. 
     * @type {string}
     * @memberof SummaryApiGetBasicSummary
     */
    readonly end: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof SummaryApiGetBasicSummary
     */
    readonly xTraceId?: string

    /**
     * A currency code like EUR or USD, to filter the result. 
     * @type {string}
     * @memberof SummaryApiGetBasicSummary
     */
    readonly currencyCode?: string
}

/**
 * SummaryApi - object-oriented interface
 * @export
 * @class SummaryApi
 * @extends {BaseAPI}
 */
export class SummaryApi extends BaseAPI {
    /**
     * Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is used in Firefly III to populate the dashboard. 
     * @summary Returns basic sums of the users data.
     * @param {SummaryApiGetBasicSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummaryApi
     */
    public getBasicSummary(requestParameters: SummaryApiGetBasicSummaryRequest, options?: any) {
        return SummaryApiFp(this.configuration).getBasicSummary(requestParameters.start, requestParameters.end, requestParameters.xTraceId, requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }
}
