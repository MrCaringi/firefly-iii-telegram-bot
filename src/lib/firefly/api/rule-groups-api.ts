/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { RuleArray } from '../model';
// @ts-ignore
import { RuleGroupArray } from '../model';
// @ts-ignore
import { RuleGroupSingle } from '../model';
// @ts-ignore
import { RuleGroupStore } from '../model';
// @ts-ignore
import { RuleGroupUpdate } from '../model';
// @ts-ignore
import { TransactionArray } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * RuleGroupsApi - axios parameter creator
 * @export
 */
export const RuleGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a rule group.
         * @summary Delete a rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleGroup: async (id: string, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRuleGroup', 'id', id)
            const localVarPath = `/v1/rule-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
         * @summary Fire the rule group on your transactions.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
         * @param {Array<number>} [accounts] Limit the triggering of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fireRuleGroup: async (id: string, xTraceId?: string, start?: string, end?: string, accounts?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fireRuleGroup', 'id', id)
            const localVarPath = `/v1/rule-groups/{id}/trigger`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single rule group. This does not include the rules. For that, see below.
         * @summary Get a single rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleGroup: async (id: string, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRuleGroup', 'id', id)
            const localVarPath = `/v1/rule-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List rules in this rule group.
         * @summary List rules in this rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuleByGroup: async (id: string, xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listRuleByGroup', 'id', id)
            const localVarPath = `/v1/rule-groups/{id}/rules`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all rule groups.
         * @summary List all rule groups.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuleGroup: async (xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rule-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new rule group.
         * @param {RuleGroupStore} ruleGroupStore JSON array or key&#x3D;value pairs with the necessary rule group information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRuleGroup: async (ruleGroupStore: RuleGroupStore, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleGroupStore' is not null or undefined
            assertParamExists('storeRuleGroup', 'ruleGroupStore', ruleGroupStore)
            const localVarPath = `/v1/rule-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ruleGroupStore, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
         * @summary Test which transactions would be hit by the rule group. No changes will be made.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
         * @param {number} [searchLimit] Maximum number of transactions Firefly III will try. Don\&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200. 
         * @param {number} [triggeredLimit] Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don\&#39;t go above the user\&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow. 
         * @param {Array<number>} [accounts] Limit the testing of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRuleGroup: async (id: string, xTraceId?: string, limit?: number, page?: number, start?: string, end?: string, searchLimit?: number, triggeredLimit?: number, accounts?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testRuleGroup', 'id', id)
            const localVarPath = `/v1/rule-groups/{id}/test`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString().substr(0,10) :
                    start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString().substr(0,10) :
                    end;
            }

            if (searchLimit !== undefined) {
                localVarQueryParameter['search_limit'] = searchLimit;
            }

            if (triggeredLimit !== undefined) {
                localVarQueryParameter['triggered_limit'] = triggeredLimit;
            }

            if (accounts) {
                localVarQueryParameter['accounts[]'] = accounts;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing rule group.
         * @summary Update existing rule group.
         * @param {string} id The ID of the rule group.
         * @param {RuleGroupUpdate} ruleGroupUpdate JSON array with updated rule group information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRuleGroup: async (id: string, ruleGroupUpdate: RuleGroupUpdate, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRuleGroup', 'id', id)
            // verify required parameter 'ruleGroupUpdate' is not null or undefined
            assertParamExists('updateRuleGroup', 'ruleGroupUpdate', ruleGroupUpdate)
            const localVarPath = `/v1/rule-groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ruleGroupUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleGroupsApi - functional programming interface
 * @export
 */
export const RuleGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuleGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a rule group.
         * @summary Delete a rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRuleGroup(id: string, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRuleGroup(id, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
         * @summary Fire the rule group on your transactions.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
         * @param {Array<number>} [accounts] Limit the triggering of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fireRuleGroup(id: string, xTraceId?: string, start?: string, end?: string, accounts?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fireRuleGroup(id, xTraceId, start, end, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single rule group. This does not include the rules. For that, see below.
         * @summary Get a single rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuleGroup(id: string, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleGroupSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuleGroup(id, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List rules in this rule group.
         * @summary List rules in this rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRuleByGroup(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRuleByGroup(id, xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all rule groups.
         * @summary List all rule groups.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRuleGroup(xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleGroupArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRuleGroup(xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new rule group.
         * @param {RuleGroupStore} ruleGroupStore JSON array or key&#x3D;value pairs with the necessary rule group information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeRuleGroup(ruleGroupStore: RuleGroupStore, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleGroupSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeRuleGroup(ruleGroupStore, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
         * @summary Test which transactions would be hit by the rule group. No changes will be made.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
         * @param {number} [searchLimit] Maximum number of transactions Firefly III will try. Don\&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200. 
         * @param {number} [triggeredLimit] Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don\&#39;t go above the user\&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow. 
         * @param {Array<number>} [accounts] Limit the testing of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testRuleGroup(id: string, xTraceId?: string, limit?: number, page?: number, start?: string, end?: string, searchLimit?: number, triggeredLimit?: number, accounts?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testRuleGroup(id, xTraceId, limit, page, start, end, searchLimit, triggeredLimit, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update existing rule group.
         * @summary Update existing rule group.
         * @param {string} id The ID of the rule group.
         * @param {RuleGroupUpdate} ruleGroupUpdate JSON array with updated rule group information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRuleGroup(id: string, ruleGroupUpdate: RuleGroupUpdate, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleGroupSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRuleGroup(id, ruleGroupUpdate, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuleGroupsApi - factory interface
 * @export
 */
export const RuleGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuleGroupsApiFp(configuration)
    return {
        /**
         * Delete a rule group.
         * @summary Delete a rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRuleGroup(id: string, xTraceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRuleGroup(id, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
         * @summary Fire the rule group on your transactions.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
         * @param {Array<number>} [accounts] Limit the triggering of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fireRuleGroup(id: string, xTraceId?: string, start?: string, end?: string, accounts?: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.fireRuleGroup(id, xTraceId, start, end, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single rule group. This does not include the rules. For that, see below.
         * @summary Get a single rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleGroup(id: string, xTraceId?: string, options?: any): AxiosPromise<RuleGroupSingle> {
            return localVarFp.getRuleGroup(id, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * List rules in this rule group.
         * @summary List rules in this rule group.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuleByGroup(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<RuleArray> {
            return localVarFp.listRuleByGroup(id, xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * List all rule groups.
         * @summary List all rule groups.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRuleGroup(xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<RuleGroupArray> {
            return localVarFp.listRuleGroup(xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new rule group.
         * @param {RuleGroupStore} ruleGroupStore JSON array or key&#x3D;value pairs with the necessary rule group information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRuleGroup(ruleGroupStore: RuleGroupStore, xTraceId?: string, options?: any): AxiosPromise<RuleGroupSingle> {
            return localVarFp.storeRuleGroup(ruleGroupStore, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
         * @summary Test which transactions would be hit by the rule group. No changes will be made.
         * @param {string} id The ID of the rule group.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {string} [start] A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
         * @param {string} [end] A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
         * @param {number} [searchLimit] Maximum number of transactions Firefly III will try. Don\&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200. 
         * @param {number} [triggeredLimit] Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don\&#39;t go above the user\&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow. 
         * @param {Array<number>} [accounts] Limit the testing of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testRuleGroup(id: string, xTraceId?: string, limit?: number, page?: number, start?: string, end?: string, searchLimit?: number, triggeredLimit?: number, accounts?: Array<number>, options?: any): AxiosPromise<TransactionArray> {
            return localVarFp.testRuleGroup(id, xTraceId, limit, page, start, end, searchLimit, triggeredLimit, accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing rule group.
         * @summary Update existing rule group.
         * @param {string} id The ID of the rule group.
         * @param {RuleGroupUpdate} ruleGroupUpdate JSON array with updated rule group information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRuleGroup(id: string, ruleGroupUpdate: RuleGroupUpdate, xTraceId?: string, options?: any): AxiosPromise<RuleGroupSingle> {
            return localVarFp.updateRuleGroup(id, ruleGroupUpdate, xTraceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiDeleteRuleGroupRequest
 */
export interface RuleGroupsApiDeleteRuleGroupRequest {
    /**
     * The ID of the rule group.
     * @type {string}
     * @memberof RuleGroupsApiDeleteRuleGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiDeleteRuleGroup
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for fireRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiFireRuleGroupRequest
 */
export interface RuleGroupsApiFireRuleGroupRequest {
    /**
     * The ID of the rule group.
     * @type {string}
     * @memberof RuleGroupsApiFireRuleGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiFireRuleGroup
     */
    readonly xTraceId?: string

    /**
     * A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
     * @type {string}
     * @memberof RuleGroupsApiFireRuleGroup
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present. 
     * @type {string}
     * @memberof RuleGroupsApiFireRuleGroup
     */
    readonly end?: string

    /**
     * Limit the triggering of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
     * @type {Array<number>}
     * @memberof RuleGroupsApiFireRuleGroup
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for getRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiGetRuleGroupRequest
 */
export interface RuleGroupsApiGetRuleGroupRequest {
    /**
     * The ID of the rule group.
     * @type {string}
     * @memberof RuleGroupsApiGetRuleGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiGetRuleGroup
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for listRuleByGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiListRuleByGroupRequest
 */
export interface RuleGroupsApiListRuleByGroupRequest {
    /**
     * The ID of the rule group.
     * @type {string}
     * @memberof RuleGroupsApiListRuleByGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiListRuleByGroup
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof RuleGroupsApiListRuleByGroup
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof RuleGroupsApiListRuleByGroup
     */
    readonly page?: number
}

/**
 * Request parameters for listRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiListRuleGroupRequest
 */
export interface RuleGroupsApiListRuleGroupRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiListRuleGroup
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof RuleGroupsApiListRuleGroup
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof RuleGroupsApiListRuleGroup
     */
    readonly page?: number
}

/**
 * Request parameters for storeRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiStoreRuleGroupRequest
 */
export interface RuleGroupsApiStoreRuleGroupRequest {
    /**
     * JSON array or key&#x3D;value pairs with the necessary rule group information. See the model for the exact specifications.
     * @type {RuleGroupStore}
     * @memberof RuleGroupsApiStoreRuleGroup
     */
    readonly ruleGroupStore: RuleGroupStore

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiStoreRuleGroup
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for testRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiTestRuleGroupRequest
 */
export interface RuleGroupsApiTestRuleGroupRequest {
    /**
     * The ID of the rule group.
     * @type {string}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly page?: number

    /**
     * A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
     * @type {string}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly start?: string

    /**
     * A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present. 
     * @type {string}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly end?: string

    /**
     * Maximum number of transactions Firefly III will try. Don\&#39;t set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200. 
     * @type {number}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly searchLimit?: number

    /**
     * Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don\&#39;t go above the user\&#39;s page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow. 
     * @type {number}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly triggeredLimit?: number

    /**
     * Limit the testing of the rule group to these asset accounts or liabilities. Only asset accounts and liabilities will be accepted. Other types will be silently dropped. 
     * @type {Array<number>}
     * @memberof RuleGroupsApiTestRuleGroup
     */
    readonly accounts?: Array<number>
}

/**
 * Request parameters for updateRuleGroup operation in RuleGroupsApi.
 * @export
 * @interface RuleGroupsApiUpdateRuleGroupRequest
 */
export interface RuleGroupsApiUpdateRuleGroupRequest {
    /**
     * The ID of the rule group.
     * @type {string}
     * @memberof RuleGroupsApiUpdateRuleGroup
     */
    readonly id: string

    /**
     * JSON array with updated rule group information. See the model for the exact specifications.
     * @type {RuleGroupUpdate}
     * @memberof RuleGroupsApiUpdateRuleGroup
     */
    readonly ruleGroupUpdate: RuleGroupUpdate

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof RuleGroupsApiUpdateRuleGroup
     */
    readonly xTraceId?: string
}

/**
 * RuleGroupsApi - object-oriented interface
 * @export
 * @class RuleGroupsApi
 * @extends {BaseAPI}
 */
export class RuleGroupsApi extends BaseAPI {
    /**
     * Delete a rule group.
     * @summary Delete a rule group.
     * @param {RuleGroupsApiDeleteRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public deleteRuleGroup(requestParameters: RuleGroupsApiDeleteRuleGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).deleteRuleGroup(requestParameters.id, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
     * @summary Fire the rule group on your transactions.
     * @param {RuleGroupsApiFireRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public fireRuleGroup(requestParameters: RuleGroupsApiFireRuleGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).fireRuleGroup(requestParameters.id, requestParameters.xTraceId, requestParameters.start, requestParameters.end, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single rule group. This does not include the rules. For that, see below.
     * @summary Get a single rule group.
     * @param {RuleGroupsApiGetRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public getRuleGroup(requestParameters: RuleGroupsApiGetRuleGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).getRuleGroup(requestParameters.id, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List rules in this rule group.
     * @summary List rules in this rule group.
     * @param {RuleGroupsApiListRuleByGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public listRuleByGroup(requestParameters: RuleGroupsApiListRuleByGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).listRuleByGroup(requestParameters.id, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all rule groups.
     * @summary List all rule groups.
     * @param {RuleGroupsApiListRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public listRuleGroup(requestParameters: RuleGroupsApiListRuleGroupRequest = {}, options?: any) {
        return RuleGroupsApiFp(this.configuration).listRuleGroup(requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
     * @summary Store a new rule group.
     * @param {RuleGroupsApiStoreRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public storeRuleGroup(requestParameters: RuleGroupsApiStoreRuleGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).storeRuleGroup(requestParameters.ruleGroupStore, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
     * @summary Test which transactions would be hit by the rule group. No changes will be made.
     * @param {RuleGroupsApiTestRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public testRuleGroup(requestParameters: RuleGroupsApiTestRuleGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).testRuleGroup(requestParameters.id, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, requestParameters.start, requestParameters.end, requestParameters.searchLimit, requestParameters.triggeredLimit, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing rule group.
     * @summary Update existing rule group.
     * @param {RuleGroupsApiUpdateRuleGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public updateRuleGroup(requestParameters: RuleGroupsApiUpdateRuleGroupRequest, options?: any) {
        return RuleGroupsApiFp(this.configuration).updateRuleGroup(requestParameters.id, requestParameters.ruleGroupUpdate, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }
}
