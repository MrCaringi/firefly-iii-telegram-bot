/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { CronResult } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { SystemInfo } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
// @ts-ignore
import { UserSingle } from '../model';
/**
 * AboutApi - axios parameter creator
 * @export
 */
export const AboutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns general system information and versions of the (supporting) software. 
         * @summary System information end point.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout: async (xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users. 
         * @summary Cron job endpoint
         * @param {string} cliToken The CLI token of any user in Firefly III, required to run the cron job.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [date] A date formatted YYYY-MM-DD. This can be used to make the cron job pretend it\&#39;s running on another day. 
         * @param {boolean} [force] Forces the cron job to fire, regardless of whether it has fired before. This may result in double transactions or weird budgets, so be careful. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCron: async (cliToken: string, xTraceId?: string, date?: string, force?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cliToken' is not null or undefined
            assertParamExists('getCron', 'cliToken', cliToken)
            const localVarPath = `/v1/cron/{cliToken}`
                .replace(`{${"cliToken"}}`, encodeURIComponent(String(cliToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the currently authenticated user. 
         * @summary Currently authenticated user endpoint.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/about/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AboutApi - functional programming interface
 * @export
 */
export const AboutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AboutApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns general system information and versions of the (supporting) software. 
         * @summary System information end point.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbout(xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbout(xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users. 
         * @summary Cron job endpoint
         * @param {string} cliToken The CLI token of any user in Firefly III, required to run the cron job.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [date] A date formatted YYYY-MM-DD. This can be used to make the cron job pretend it\&#39;s running on another day. 
         * @param {boolean} [force] Forces the cron job to fire, regardless of whether it has fired before. This may result in double transactions or weird budgets, so be careful. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCron(cliToken: string, xTraceId?: string, date?: string, force?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCron(cliToken, xTraceId, date, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the currently authenticated user. 
         * @summary Currently authenticated user endpoint.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AboutApi - factory interface
 * @export
 */
export const AboutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AboutApiFp(configuration)
    return {
        /**
         * Returns general system information and versions of the (supporting) software. 
         * @summary System information end point.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout(xTraceId?: string, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.getAbout(xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users. 
         * @summary Cron job endpoint
         * @param {string} cliToken The CLI token of any user in Firefly III, required to run the cron job.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [date] A date formatted YYYY-MM-DD. This can be used to make the cron job pretend it\&#39;s running on another day. 
         * @param {boolean} [force] Forces the cron job to fire, regardless of whether it has fired before. This may result in double transactions or weird budgets, so be careful. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCron(cliToken: string, xTraceId?: string, date?: string, force?: boolean, options?: any): AxiosPromise<CronResult> {
            return localVarFp.getCron(cliToken, xTraceId, date, force, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the currently authenticated user. 
         * @summary Currently authenticated user endpoint.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(xTraceId?: string, options?: any): AxiosPromise<UserSingle> {
            return localVarFp.getCurrentUser(xTraceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAbout operation in AboutApi.
 * @export
 * @interface AboutApiGetAboutRequest
 */
export interface AboutApiGetAboutRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AboutApiGetAbout
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for getCron operation in AboutApi.
 * @export
 * @interface AboutApiGetCronRequest
 */
export interface AboutApiGetCronRequest {
    /**
     * The CLI token of any user in Firefly III, required to run the cron job.
     * @type {string}
     * @memberof AboutApiGetCron
     */
    readonly cliToken: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AboutApiGetCron
     */
    readonly xTraceId?: string

    /**
     * A date formatted YYYY-MM-DD. This can be used to make the cron job pretend it\&#39;s running on another day. 
     * @type {string}
     * @memberof AboutApiGetCron
     */
    readonly date?: string

    /**
     * Forces the cron job to fire, regardless of whether it has fired before. This may result in double transactions or weird budgets, so be careful. 
     * @type {boolean}
     * @memberof AboutApiGetCron
     */
    readonly force?: boolean
}

/**
 * Request parameters for getCurrentUser operation in AboutApi.
 * @export
 * @interface AboutApiGetCurrentUserRequest
 */
export interface AboutApiGetCurrentUserRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AboutApiGetCurrentUser
     */
    readonly xTraceId?: string
}

/**
 * AboutApi - object-oriented interface
 * @export
 * @class AboutApi
 * @extends {BaseAPI}
 */
export class AboutApi extends BaseAPI {
    /**
     * Returns general system information and versions of the (supporting) software. 
     * @summary System information end point.
     * @param {AboutApiGetAboutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public getAbout(requestParameters: AboutApiGetAboutRequest = {}, options?: any) {
        return AboutApiFp(this.configuration).getAbout(requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users. 
     * @summary Cron job endpoint
     * @param {AboutApiGetCronRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public getCron(requestParameters: AboutApiGetCronRequest, options?: any) {
        return AboutApiFp(this.configuration).getCron(requestParameters.cliToken, requestParameters.xTraceId, requestParameters.date, requestParameters.force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the currently authenticated user. 
     * @summary Currently authenticated user endpoint.
     * @param {AboutApiGetCurrentUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public getCurrentUser(requestParameters: AboutApiGetCurrentUserRequest = {}, options?: any) {
        return AboutApiFp(this.configuration).getCurrentUser(requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }
}
