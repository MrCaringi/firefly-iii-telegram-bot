/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountTypeFilter } from '../model';
// @ts-ignore
import { AutocompleteAccountArray } from '../model';
// @ts-ignore
import { AutocompleteBillArray } from '../model';
// @ts-ignore
import { AutocompleteBudgetArray } from '../model';
// @ts-ignore
import { AutocompleteCategoryArray } from '../model';
// @ts-ignore
import { AutocompleteCurrencyArray } from '../model';
// @ts-ignore
import { AutocompleteCurrencyCodeArray } from '../model';
// @ts-ignore
import { AutocompleteObjectGroupArray } from '../model';
// @ts-ignore
import { AutocompletePiggyArray } from '../model';
// @ts-ignore
import { AutocompletePiggyBalanceArray } from '../model';
// @ts-ignore
import { AutocompleteRecurrenceArray } from '../model';
// @ts-ignore
import { AutocompleteRuleArray } from '../model';
// @ts-ignore
import { AutocompleteRuleGroupArray } from '../model';
// @ts-ignore
import { AutocompleteTagArray } from '../model';
// @ts-ignore
import { AutocompleteTransactionArray } from '../model';
// @ts-ignore
import { AutocompleteTransactionIDArray } from '../model';
// @ts-ignore
import { AutocompleteTransactionTypeArray } from '../model';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
/**
 * AutocompleteApi - axios parameter creator
 * @export
 */
export const AutocompleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all accounts of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {string} [date] If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date.
         * @param {Array<AccountTypeFilter>} [types] Optional filter on the account type(s) used in the autocomplete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAC: async (xTraceId?: string, query?: string, limit?: number, date?: string, types?: Array<AccountTypeFilter>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all bills of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillsAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all budgets of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/budgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all categories of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all currencies of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrenciesAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrenciesCodeAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/currencies-with-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all object groups of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectGroupsAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/object-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all piggy banks of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPiggiesAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/piggy-banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPiggiesBalanceAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/piggy-banks-with-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all recurring transactions of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecurringAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/recurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all rule groups of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleGroupsAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/rule-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all rules of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRulesAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all tags of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all transaction types returned in a basic auto-complete array. English only.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionTypesAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/transaction-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all transaction descriptions of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsIDAC: async (xTraceId?: string, query?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/autocomplete/transactions-with-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutocompleteApi - functional programming interface
 * @export
 */
export const AutocompleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutocompleteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all accounts of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {string} [date] If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date.
         * @param {Array<AccountTypeFilter>} [types] Optional filter on the account type(s) used in the autocomplete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAC(xTraceId?: string, query?: string, limit?: number, date?: string, types?: Array<AccountTypeFilter>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteAccountArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsAC(xTraceId, query, limit, date, types, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all bills of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillsAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteBillArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillsAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all budgets of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBudgetsAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteBudgetArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBudgetsAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all categories of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteCategoryArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all currencies of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrenciesAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteCurrencyArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrenciesAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrenciesCodeAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteCurrencyCodeArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrenciesCodeAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all object groups of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObjectGroupsAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteObjectGroupArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getObjectGroupsAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all piggy banks of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPiggiesAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompletePiggyArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPiggiesAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPiggiesBalanceAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompletePiggyBalanceArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPiggiesBalanceAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all recurring transactions of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecurringAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteRecurrenceArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecurringAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all rule groups of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuleGroupsAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteRuleGroupArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuleGroupsAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all rules of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRulesAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteRuleArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRulesAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all tags of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteTagArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all transaction types returned in a basic auto-complete array. English only.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionTypesAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteTransactionTypeArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionTypesAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all transaction descriptions of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionsAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteTransactionArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionsAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionsIDAC(xTraceId?: string, query?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutocompleteTransactionIDArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionsIDAC(xTraceId, query, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutocompleteApi - factory interface
 * @export
 */
export const AutocompleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutocompleteApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all accounts of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {string} [date] If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date.
         * @param {Array<AccountTypeFilter>} [types] Optional filter on the account type(s) used in the autocomplete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAC(xTraceId?: string, query?: string, limit?: number, date?: string, types?: Array<AccountTypeFilter>, options?: any): AxiosPromise<AutocompleteAccountArray> {
            return localVarFp.getAccountsAC(xTraceId, query, limit, date, types, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all bills of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillsAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteBillArray> {
            return localVarFp.getBillsAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all budgets of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteBudgetArray> {
            return localVarFp.getBudgetsAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all categories of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteCategoryArray> {
            return localVarFp.getCategoriesAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all currencies of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrenciesAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteCurrencyArray> {
            return localVarFp.getCurrenciesAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrenciesCodeAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteCurrencyCodeArray> {
            return localVarFp.getCurrenciesCodeAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all object groups of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectGroupsAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteObjectGroupArray> {
            return localVarFp.getObjectGroupsAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all piggy banks of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPiggiesAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompletePiggyArray> {
            return localVarFp.getPiggiesAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPiggiesBalanceAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompletePiggyBalanceArray> {
            return localVarFp.getPiggiesBalanceAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all recurring transactions of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecurringAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteRecurrenceArray> {
            return localVarFp.getRecurringAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all rule groups of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleGroupsAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteRuleGroupArray> {
            return localVarFp.getRuleGroupsAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all rules of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRulesAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteRuleArray> {
            return localVarFp.getRulesAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all tags of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteTagArray> {
            return localVarFp.getTagAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all transaction types returned in a basic auto-complete array. English only.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionTypesAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteTransactionTypeArray> {
            return localVarFp.getTransactionTypesAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all transaction descriptions of the user returned in a basic auto-complete array.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteTransactionArray> {
            return localVarFp.getTransactionsAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {string} [query] The autocomplete search query.
         * @param {number} [limit] The number of items returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsIDAC(xTraceId?: string, query?: string, limit?: number, options?: any): AxiosPromise<AutocompleteTransactionIDArray> {
            return localVarFp.getTransactionsIDAC(xTraceId, query, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccountsAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetAccountsACRequest
 */
export interface AutocompleteApiGetAccountsACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetAccountsAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetAccountsAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetAccountsAC
     */
    readonly limit?: number

    /**
     * If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date.
     * @type {string}
     * @memberof AutocompleteApiGetAccountsAC
     */
    readonly date?: string

    /**
     * Optional filter on the account type(s) used in the autocomplete.
     * @type {Array<AccountTypeFilter>}
     * @memberof AutocompleteApiGetAccountsAC
     */
    readonly types?: Array<AccountTypeFilter>
}

/**
 * Request parameters for getBillsAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetBillsACRequest
 */
export interface AutocompleteApiGetBillsACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetBillsAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetBillsAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetBillsAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getBudgetsAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetBudgetsACRequest
 */
export interface AutocompleteApiGetBudgetsACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetBudgetsAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetBudgetsAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetBudgetsAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getCategoriesAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetCategoriesACRequest
 */
export interface AutocompleteApiGetCategoriesACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetCategoriesAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetCategoriesAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetCategoriesAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getCurrenciesAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetCurrenciesACRequest
 */
export interface AutocompleteApiGetCurrenciesACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetCurrenciesAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetCurrenciesAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetCurrenciesAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getCurrenciesCodeAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetCurrenciesCodeACRequest
 */
export interface AutocompleteApiGetCurrenciesCodeACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetCurrenciesCodeAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetCurrenciesCodeAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetCurrenciesCodeAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getObjectGroupsAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetObjectGroupsACRequest
 */
export interface AutocompleteApiGetObjectGroupsACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetObjectGroupsAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetObjectGroupsAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetObjectGroupsAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getPiggiesAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetPiggiesACRequest
 */
export interface AutocompleteApiGetPiggiesACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetPiggiesAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetPiggiesAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetPiggiesAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getPiggiesBalanceAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetPiggiesBalanceACRequest
 */
export interface AutocompleteApiGetPiggiesBalanceACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetPiggiesBalanceAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetPiggiesBalanceAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetPiggiesBalanceAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getRecurringAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetRecurringACRequest
 */
export interface AutocompleteApiGetRecurringACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetRecurringAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetRecurringAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetRecurringAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getRuleGroupsAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetRuleGroupsACRequest
 */
export interface AutocompleteApiGetRuleGroupsACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetRuleGroupsAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetRuleGroupsAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetRuleGroupsAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getRulesAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetRulesACRequest
 */
export interface AutocompleteApiGetRulesACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetRulesAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetRulesAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetRulesAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getTagAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetTagACRequest
 */
export interface AutocompleteApiGetTagACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetTagAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetTagAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetTagAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getTransactionTypesAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetTransactionTypesACRequest
 */
export interface AutocompleteApiGetTransactionTypesACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetTransactionTypesAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetTransactionTypesAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetTransactionTypesAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getTransactionsAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetTransactionsACRequest
 */
export interface AutocompleteApiGetTransactionsACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetTransactionsAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetTransactionsAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetTransactionsAC
     */
    readonly limit?: number
}

/**
 * Request parameters for getTransactionsIDAC operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiGetTransactionsIDACRequest
 */
export interface AutocompleteApiGetTransactionsIDACRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof AutocompleteApiGetTransactionsIDAC
     */
    readonly xTraceId?: string

    /**
     * The autocomplete search query.
     * @type {string}
     * @memberof AutocompleteApiGetTransactionsIDAC
     */
    readonly query?: string

    /**
     * The number of items returned.
     * @type {number}
     * @memberof AutocompleteApiGetTransactionsIDAC
     */
    readonly limit?: number
}

/**
 * AutocompleteApi - object-oriented interface
 * @export
 * @class AutocompleteApi
 * @extends {BaseAPI}
 */
export class AutocompleteApi extends BaseAPI {
    /**
     * 
     * @summary Returns all accounts of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetAccountsACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getAccountsAC(requestParameters: AutocompleteApiGetAccountsACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getAccountsAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, requestParameters.date, requestParameters.types, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all bills of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetBillsACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getBillsAC(requestParameters: AutocompleteApiGetBillsACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getBillsAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all budgets of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetBudgetsACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getBudgetsAC(requestParameters: AutocompleteApiGetBudgetsACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getBudgetsAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all categories of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetCategoriesACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getCategoriesAC(requestParameters: AutocompleteApiGetCategoriesACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getCategoriesAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all currencies of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetCurrenciesACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getCurrenciesAC(requestParameters: AutocompleteApiGetCurrenciesACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getCurrenciesAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
     * @param {AutocompleteApiGetCurrenciesCodeACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getCurrenciesCodeAC(requestParameters: AutocompleteApiGetCurrenciesCodeACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getCurrenciesCodeAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all object groups of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetObjectGroupsACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getObjectGroupsAC(requestParameters: AutocompleteApiGetObjectGroupsACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getObjectGroupsAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all piggy banks of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetPiggiesACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getPiggiesAC(requestParameters: AutocompleteApiGetPiggiesACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getPiggiesAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
     * @param {AutocompleteApiGetPiggiesBalanceACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getPiggiesBalanceAC(requestParameters: AutocompleteApiGetPiggiesBalanceACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getPiggiesBalanceAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all recurring transactions of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetRecurringACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getRecurringAC(requestParameters: AutocompleteApiGetRecurringACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getRecurringAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all rule groups of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetRuleGroupsACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getRuleGroupsAC(requestParameters: AutocompleteApiGetRuleGroupsACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getRuleGroupsAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all rules of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetRulesACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getRulesAC(requestParameters: AutocompleteApiGetRulesACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getRulesAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all tags of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetTagACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getTagAC(requestParameters: AutocompleteApiGetTagACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getTagAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all transaction types returned in a basic auto-complete array. English only.
     * @param {AutocompleteApiGetTransactionTypesACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getTransactionTypesAC(requestParameters: AutocompleteApiGetTransactionTypesACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getTransactionTypesAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all transaction descriptions of the user returned in a basic auto-complete array.
     * @param {AutocompleteApiGetTransactionsACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getTransactionsAC(requestParameters: AutocompleteApiGetTransactionsACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getTransactionsAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
     * @param {AutocompleteApiGetTransactionsIDACRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getTransactionsIDAC(requestParameters: AutocompleteApiGetTransactionsIDACRequest = {}, options?: any) {
        return AutocompleteApiFp(this.configuration).getTransactionsIDAC(requestParameters.xTraceId, requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
