/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountArray } from '../model';
// @ts-ignore
import { AccountSearchFieldFilter } from '../model';
// @ts-ignore
import { AccountTypeFilter } from '../model';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { TransactionArray } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for accounts
         * @summary Search for accounts
         * @param {string} query The query you wish to search for.
         * @param {AccountSearchFieldFilter} field The account field(s) you want to search in.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {AccountTypeFilter} [type] The type of accounts you wish to limit the search to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAccounts: async (query: string, field: AccountSearchFieldFilter, xTraceId?: string, limit?: number, page?: number, type?: AccountTypeFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchAccounts', 'query', query)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('searchAccounts', 'field', field)
            const localVarPath = `/v1/search/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (field !== undefined) {
                localVarQueryParameter['field'] = field;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches through the users transactions.
         * @summary Search for transactions
         * @param {string} query The query you wish to search for.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTransactions: async (query: string, xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchTransactions', 'query', query)
            const localVarPath = `/v1/search/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Search for accounts
         * @summary Search for accounts
         * @param {string} query The query you wish to search for.
         * @param {AccountSearchFieldFilter} field The account field(s) you want to search in.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {AccountTypeFilter} [type] The type of accounts you wish to limit the search to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAccounts(query: string, field: AccountSearchFieldFilter, xTraceId?: string, limit?: number, page?: number, type?: AccountTypeFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAccounts(query, field, xTraceId, limit, page, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches through the users transactions.
         * @summary Search for transactions
         * @param {string} query The query you wish to search for.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTransactions(query: string, xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTransactions(query, xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Search for accounts
         * @summary Search for accounts
         * @param {string} query The query you wish to search for.
         * @param {AccountSearchFieldFilter} field The account field(s) you want to search in.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {AccountTypeFilter} [type] The type of accounts you wish to limit the search to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAccounts(query: string, field: AccountSearchFieldFilter, xTraceId?: string, limit?: number, page?: number, type?: AccountTypeFilter, options?: any): AxiosPromise<AccountArray> {
            return localVarFp.searchAccounts(query, field, xTraceId, limit, page, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches through the users transactions.
         * @summary Search for transactions
         * @param {string} query The query you wish to search for.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTransactions(query: string, xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<TransactionArray> {
            return localVarFp.searchTransactions(query, xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchAccounts operation in SearchApi.
 * @export
 * @interface SearchApiSearchAccountsRequest
 */
export interface SearchApiSearchAccountsRequest {
    /**
     * The query you wish to search for.
     * @type {string}
     * @memberof SearchApiSearchAccounts
     */
    readonly query: string

    /**
     * The account field(s) you want to search in.
     * @type {AccountSearchFieldFilter}
     * @memberof SearchApiSearchAccounts
     */
    readonly field: AccountSearchFieldFilter

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof SearchApiSearchAccounts
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof SearchApiSearchAccounts
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof SearchApiSearchAccounts
     */
    readonly page?: number

    /**
     * The type of accounts you wish to limit the search to.
     * @type {AccountTypeFilter}
     * @memberof SearchApiSearchAccounts
     */
    readonly type?: AccountTypeFilter
}

/**
 * Request parameters for searchTransactions operation in SearchApi.
 * @export
 * @interface SearchApiSearchTransactionsRequest
 */
export interface SearchApiSearchTransactionsRequest {
    /**
     * The query you wish to search for.
     * @type {string}
     * @memberof SearchApiSearchTransactions
     */
    readonly query: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof SearchApiSearchTransactions
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof SearchApiSearchTransactions
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof SearchApiSearchTransactions
     */
    readonly page?: number
}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Search for accounts
     * @summary Search for accounts
     * @param {SearchApiSearchAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchAccounts(requestParameters: SearchApiSearchAccountsRequest, options?: any) {
        return SearchApiFp(this.configuration).searchAccounts(requestParameters.query, requestParameters.field, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches through the users transactions.
     * @summary Search for transactions
     * @param {SearchApiSearchTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTransactions(requestParameters: SearchApiSearchTransactionsRequest, options?: any) {
        return SearchApiFp(this.configuration).searchTransactions(requestParameters.query, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}
