/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentArray } from '../model';
// @ts-ignore
import { BadRequest } from '../model';
// @ts-ignore
import { InternalException } from '../model';
// @ts-ignore
import { NotFound } from '../model';
// @ts-ignore
import { PiggyBankArray } from '../model';
// @ts-ignore
import { PiggyBankEventArray } from '../model';
// @ts-ignore
import { PiggyBankSingle } from '../model';
// @ts-ignore
import { PiggyBankStore } from '../model';
// @ts-ignore
import { PiggyBankUpdate } from '../model';
// @ts-ignore
import { Unauthenticated } from '../model';
// @ts-ignore
import { ValidationError } from '../model';
/**
 * PiggyBanksApi - axios parameter creator
 * @export
 */
export const PiggyBanksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a piggy bank.
         * @summary Delete a piggy bank.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePiggyBank: async (id: string, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePiggyBank', 'id', id)
            const localVarPath = `/v1/piggy-banks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single piggy bank.
         * @summary Get a single piggy bank.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPiggyBank: async (id: string, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPiggyBank', 'id', id)
            const localVarPath = `/v1/piggy-banks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all attachments.
         * @summary Lists all attachments.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentByPiggyBank: async (id: string, xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listAttachmentByPiggyBank', 'id', id)
            const localVarPath = `/v1/piggy-banks/{id}/attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all events linked to a piggy bank (adding and removing money).
         * @summary List all events linked to a piggy bank.
         * @param {string} id The ID of the piggy bank
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventByPiggyBank: async (id: string, xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEventByPiggyBank', 'id', id)
            const localVarPath = `/v1/piggy-banks/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all piggy banks.
         * @summary List all piggy banks.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPiggyBank: async (xTraceId?: string, limit?: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/piggy-banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new piggy bank
         * @param {PiggyBankStore} piggyBankStore JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storePiggyBank: async (piggyBankStore: PiggyBankStore, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'piggyBankStore' is not null or undefined
            assertParamExists('storePiggyBank', 'piggyBankStore', piggyBankStore)
            const localVarPath = `/v1/piggy-banks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(piggyBankStore, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing piggy bank.
         * @summary Update existing piggy bank.
         * @param {string} id The ID of the piggy bank
         * @param {PiggyBankUpdate} piggyBankUpdate JSON array with updated piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePiggyBank: async (id: string, piggyBankUpdate: PiggyBankUpdate, xTraceId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePiggyBank', 'id', id)
            // verify required parameter 'piggyBankUpdate' is not null or undefined
            assertParamExists('updatePiggyBank', 'piggyBankUpdate', piggyBankUpdate)
            const localVarPath = `/v1/piggy-banks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication firefly_iii_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "firefly_iii_auth", [], configuration)

            // authentication local_bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xTraceId !== undefined && xTraceId !== null) {
                localVarHeaderParameter['X-Trace-Id'] = String(JSON.stringify(xTraceId));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(piggyBankUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PiggyBanksApi - functional programming interface
 * @export
 */
export const PiggyBanksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PiggyBanksApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a piggy bank.
         * @summary Delete a piggy bank.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePiggyBank(id: string, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePiggyBank(id, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single piggy bank.
         * @summary Get a single piggy bank.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPiggyBank(id: string, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiggyBankSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPiggyBank(id, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all attachments.
         * @summary Lists all attachments.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachmentByPiggyBank(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachmentByPiggyBank(id, xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all events linked to a piggy bank (adding and removing money).
         * @summary List all events linked to a piggy bank.
         * @param {string} id The ID of the piggy bank
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventByPiggyBank(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiggyBankEventArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEventByPiggyBank(id, xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all piggy banks.
         * @summary List all piggy banks.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPiggyBank(xTraceId?: string, limit?: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiggyBankArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPiggyBank(xTraceId, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new piggy bank
         * @param {PiggyBankStore} piggyBankStore JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storePiggyBank(piggyBankStore: PiggyBankStore, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiggyBankSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storePiggyBank(piggyBankStore, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update existing piggy bank.
         * @summary Update existing piggy bank.
         * @param {string} id The ID of the piggy bank
         * @param {PiggyBankUpdate} piggyBankUpdate JSON array with updated piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePiggyBank(id: string, piggyBankUpdate: PiggyBankUpdate, xTraceId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiggyBankSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePiggyBank(id, piggyBankUpdate, xTraceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PiggyBanksApi - factory interface
 * @export
 */
export const PiggyBanksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PiggyBanksApiFp(configuration)
    return {
        /**
         * Delete a piggy bank.
         * @summary Delete a piggy bank.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePiggyBank(id: string, xTraceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePiggyBank(id, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single piggy bank.
         * @summary Get a single piggy bank.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPiggyBank(id: string, xTraceId?: string, options?: any): AxiosPromise<PiggyBankSingle> {
            return localVarFp.getPiggyBank(id, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all attachments.
         * @summary Lists all attachments.
         * @param {string} id The ID of the piggy bank.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentByPiggyBank(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<AttachmentArray> {
            return localVarFp.listAttachmentByPiggyBank(id, xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * List all events linked to a piggy bank (adding and removing money).
         * @summary List all events linked to a piggy bank.
         * @param {string} id The ID of the piggy bank
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventByPiggyBank(id: string, xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<PiggyBankEventArray> {
            return localVarFp.listEventByPiggyBank(id, xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * List all piggy banks.
         * @summary List all piggy banks.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {number} [limit] Number of items per page. The default pagination is per 50 items.
         * @param {number} [page] Page number. The default pagination is per 50 items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPiggyBank(xTraceId?: string, limit?: number, page?: number, options?: any): AxiosPromise<PiggyBankArray> {
            return localVarFp.listPiggyBank(xTraceId, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
         * @summary Store a new piggy bank
         * @param {PiggyBankStore} piggyBankStore JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storePiggyBank(piggyBankStore: PiggyBankStore, xTraceId?: string, options?: any): AxiosPromise<PiggyBankSingle> {
            return localVarFp.storePiggyBank(piggyBankStore, xTraceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing piggy bank.
         * @summary Update existing piggy bank.
         * @param {string} id The ID of the piggy bank
         * @param {PiggyBankUpdate} piggyBankUpdate JSON array with updated piggy bank information. See the model for the exact specifications.
         * @param {string} [xTraceId] Unique identifier associated with this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePiggyBank(id: string, piggyBankUpdate: PiggyBankUpdate, xTraceId?: string, options?: any): AxiosPromise<PiggyBankSingle> {
            return localVarFp.updatePiggyBank(id, piggyBankUpdate, xTraceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiDeletePiggyBankRequest
 */
export interface PiggyBanksApiDeletePiggyBankRequest {
    /**
     * The ID of the piggy bank.
     * @type {string}
     * @memberof PiggyBanksApiDeletePiggyBank
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiDeletePiggyBank
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for getPiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiGetPiggyBankRequest
 */
export interface PiggyBanksApiGetPiggyBankRequest {
    /**
     * The ID of the piggy bank.
     * @type {string}
     * @memberof PiggyBanksApiGetPiggyBank
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiGetPiggyBank
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for listAttachmentByPiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiListAttachmentByPiggyBankRequest
 */
export interface PiggyBanksApiListAttachmentByPiggyBankRequest {
    /**
     * The ID of the piggy bank.
     * @type {string}
     * @memberof PiggyBanksApiListAttachmentByPiggyBank
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiListAttachmentByPiggyBank
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof PiggyBanksApiListAttachmentByPiggyBank
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof PiggyBanksApiListAttachmentByPiggyBank
     */
    readonly page?: number
}

/**
 * Request parameters for listEventByPiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiListEventByPiggyBankRequest
 */
export interface PiggyBanksApiListEventByPiggyBankRequest {
    /**
     * The ID of the piggy bank
     * @type {string}
     * @memberof PiggyBanksApiListEventByPiggyBank
     */
    readonly id: string

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiListEventByPiggyBank
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof PiggyBanksApiListEventByPiggyBank
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof PiggyBanksApiListEventByPiggyBank
     */
    readonly page?: number
}

/**
 * Request parameters for listPiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiListPiggyBankRequest
 */
export interface PiggyBanksApiListPiggyBankRequest {
    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiListPiggyBank
     */
    readonly xTraceId?: string

    /**
     * Number of items per page. The default pagination is per 50 items.
     * @type {number}
     * @memberof PiggyBanksApiListPiggyBank
     */
    readonly limit?: number

    /**
     * Page number. The default pagination is per 50 items.
     * @type {number}
     * @memberof PiggyBanksApiListPiggyBank
     */
    readonly page?: number
}

/**
 * Request parameters for storePiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiStorePiggyBankRequest
 */
export interface PiggyBanksApiStorePiggyBankRequest {
    /**
     * JSON array or key&#x3D;value pairs with the necessary piggy bank information. See the model for the exact specifications.
     * @type {PiggyBankStore}
     * @memberof PiggyBanksApiStorePiggyBank
     */
    readonly piggyBankStore: PiggyBankStore

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiStorePiggyBank
     */
    readonly xTraceId?: string
}

/**
 * Request parameters for updatePiggyBank operation in PiggyBanksApi.
 * @export
 * @interface PiggyBanksApiUpdatePiggyBankRequest
 */
export interface PiggyBanksApiUpdatePiggyBankRequest {
    /**
     * The ID of the piggy bank
     * @type {string}
     * @memberof PiggyBanksApiUpdatePiggyBank
     */
    readonly id: string

    /**
     * JSON array with updated piggy bank information. See the model for the exact specifications.
     * @type {PiggyBankUpdate}
     * @memberof PiggyBanksApiUpdatePiggyBank
     */
    readonly piggyBankUpdate: PiggyBankUpdate

    /**
     * Unique identifier associated with this request.
     * @type {string}
     * @memberof PiggyBanksApiUpdatePiggyBank
     */
    readonly xTraceId?: string
}

/**
 * PiggyBanksApi - object-oriented interface
 * @export
 * @class PiggyBanksApi
 * @extends {BaseAPI}
 */
export class PiggyBanksApi extends BaseAPI {
    /**
     * Delete a piggy bank.
     * @summary Delete a piggy bank.
     * @param {PiggyBanksApiDeletePiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public deletePiggyBank(requestParameters: PiggyBanksApiDeletePiggyBankRequest, options?: any) {
        return PiggyBanksApiFp(this.configuration).deletePiggyBank(requestParameters.id, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single piggy bank.
     * @summary Get a single piggy bank.
     * @param {PiggyBanksApiGetPiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public getPiggyBank(requestParameters: PiggyBanksApiGetPiggyBankRequest, options?: any) {
        return PiggyBanksApiFp(this.configuration).getPiggyBank(requestParameters.id, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all attachments.
     * @summary Lists all attachments.
     * @param {PiggyBanksApiListAttachmentByPiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public listAttachmentByPiggyBank(requestParameters: PiggyBanksApiListAttachmentByPiggyBankRequest, options?: any) {
        return PiggyBanksApiFp(this.configuration).listAttachmentByPiggyBank(requestParameters.id, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all events linked to a piggy bank (adding and removing money).
     * @summary List all events linked to a piggy bank.
     * @param {PiggyBanksApiListEventByPiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public listEventByPiggyBank(requestParameters: PiggyBanksApiListEventByPiggyBankRequest, options?: any) {
        return PiggyBanksApiFp(this.configuration).listEventByPiggyBank(requestParameters.id, requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all piggy banks.
     * @summary List all piggy banks.
     * @param {PiggyBanksApiListPiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public listPiggyBank(requestParameters: PiggyBanksApiListPiggyBankRequest = {}, options?: any) {
        return PiggyBanksApiFp(this.configuration).listPiggyBank(requestParameters.xTraceId, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
     * @summary Store a new piggy bank
     * @param {PiggyBanksApiStorePiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public storePiggyBank(requestParameters: PiggyBanksApiStorePiggyBankRequest, options?: any) {
        return PiggyBanksApiFp(this.configuration).storePiggyBank(requestParameters.piggyBankStore, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing piggy bank.
     * @summary Update existing piggy bank.
     * @param {PiggyBanksApiUpdatePiggyBankRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiggyBanksApi
     */
    public updatePiggyBank(requestParameters: PiggyBanksApiUpdatePiggyBankRequest, options?: any) {
        return PiggyBanksApiFp(this.configuration).updatePiggyBank(requestParameters.id, requestParameters.piggyBankUpdate, requestParameters.xTraceId, options).then((request) => request(this.axios, this.basePath));
    }
}
